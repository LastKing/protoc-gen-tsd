// package: <%= packageName %>
// file: <%= protoFileName %>

/* tslint:disable */
/* eslint-disable */

<% _.forEach(imports, function(item) { %> <%- item %> <% }); %>

<% _.forEach(messages, function(item) { %>
export namespace <%= item.message.messageName %> {
  export interface <%= item.objectTypeName %> {
    <% _.forEach(item.message.fields, function(value, key) { %>
        <% if(value.isMapField) %>
          <%- value.camelCaseName %>: Map<<%- value.mapFieldInfo.keyTypeName%>, <%- value.mapFieldInfo.valueTypeName %>>
        <% else %>
          <% if(value.isRepeatField) %>
            <
    <% }); %>
<% }); %>


{{#each message.fields}}
    {{~#if this.isMapField~}}{{!-- map spec start --}}
{{{../indent}}}        {{{this.camelCaseName}}}Map: Array<[{{{this.mapFieldInfo.keyTypeName}}}{{~#is this.mapFieldInfo.keyType ../MESSAGE_TYPE~}}.AsObject{{~/is~}}, {{{this.mapFieldInfo.valueTypeName}}}{{~#is this.mapFieldInfo.valueType ../MESSAGE_TYPE~}}.AsObject{{~/is~}}]>,
    {{~else~}}{{!-- map spec else --}}
        {{~#if this.isRepeatField~}}{{!-- repeat start --}}
            {{~#is this.type ../BYTES_TYPE~}}
{{{../indent}}}        {{{this.camelCaseName}}}List: Array<Uint8Array | string>,
            {{~else~}}
{{{../indent}}}        {{{this.camelCaseName}}}List: Array<{{{this.exportType}}}{{~#is this.type ../MESSAGE_TYPE~}}.AsObject{{~/is~}}>,
            {{~/is~}}
        {{else}}{{!-- repeat else --}}
            {{~#is this.type ../BYTES_TYPE~}}
{{{../indent}}}        {{{this.camelCaseName}}}: Uint8Array | string,
            {{~else~}}
{{{../indent}}}        {{{this.camelCaseName}}}{{~#if this.canBeUndefined~}}?{{~/if~}}: {{{this.fieldObjectType}}},
            {{~/is~}}
        {{~/if~}}{{!-- repeat end --}}
    {{~/if~}}{{!-- map spec end --}}
{{/each}}{{!-- fields end --}}{{{indent}}}    }
{{~#if message.nestedTypes~}}{{!-- nestedTypes start --}}

{{#each message.nestedTypes}}
{{{render 'partial/message' this}}}
{{/each}}
{{~/if~}}{{!-- nestedTypes end --}}
{{~#if message.formattedEnumListStr~}}{{!-- formattedEnumListStr start --}}
{{#each message.formattedEnumListStr}}
{{{render 'partial/enum' this}}}
{{/each}}
{{~/if~}}{{!-- formattedEnumListStr end --}}
{{~#if message.formattedOneofListStr~}}{{!-- formattedOneofListStr start --}}
{{#each message.formattedOneofListStr}}
{{{render 'partial/oneof' this}}}
{{/each}}
{{~/if~}}{{!-- formattedOneofListStr end --}}
{{~#if message.formattedExtListStr~}}{{!-- formattedExtListStr start --}}
{{#each message.formattedExtListStr}}
{{{render 'partial/extension' this}}}
{{/each}}
{{~/if~}}{{!-- formattedExtListStr end --}}
{{{indent}}}{{curlyRight}}
